#~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi
cd ~

# Create alias for switching to windows directory
windows_user=$(cmd.exe /C "echo %USERNAME%" 2>/dev/null | tr -d '\r')
dropbox_path="/mnt/c/Users/${windows_user}/Dropbox (MIT)/"
alias cdwin='cd "$dropbox_path"'
export WINDOWS_USER=$windows_user
# Create alias for with no save by default
alias R='R --no-save'

# After installing Java for configuring R
# export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/

# Create alias for rsyncing to and from dropbox 
#alias rsync2drobpox='rsync -av ~/my_config/ "${dropbox_path}my_config/"'
#alias rsyncfromdropbox='rsync -av "${dropbox_path}my_config/" ~/my_config'

export GIT_EDITOR="nvim"

set -o vi
#set show-mode-in-prompt on
#set vi-ins-mode-string "\1\e[34;1m\2[I]\1\e[0m\2"
#set vi-cmd-mode-string "\1\e[35;1m\2[N]\1\e[0m\2"

alias explorer="explorer.exe ."
# Required for nvim-treesitter
export PATH=$PATH:~/node-v22.5.1-linux-x64/bin
export R_HOME=/usr/local/bin/R
export R_LIBS_USER=~/R/library/
# For working on linux cluster
# alias nvim="$HOME/nvim-linux64/bin/nvim"

# For use with Quarto and Neovim
export BROWSER="/mnt/c/Program Files (x86)/BraveSoftware/Brave-Browser/Application/brave.exe"
#export BROWSER="wslview"

# add ls -ltr | grep -v '^d' | tail -n 5 to get the last 5 modified files. Use awk '/^-/ {print $9}' Use with my refresher script
# add search and edit function grep -rn "$1" "${2:-.}" | xargs -I {} nvim +{} {}
#
# For neovim clipboard support.
#export DISPLAY=$(cat /etc/resolv.conf | grep nameserver | awk '{print $2}'):0

# Function: nvim_all
# Purpose: Open files in neovim after excluding common dirs and files.
# Parameters: Option - Search directory, if none provided current working directory '.' is used as default.
# Return: Open all files after excluding dirs and files with particulars in neovim.
nvim_all() {
    local exclude_dirs=(".git" "node_modules" "build" "dist" "renv" ".venv")
    local exclude_files=("*.log" "*.tmp" "*.bak" "*.swp")
    local search_dir="${1:-.}"

    local exclude_args=()
    for dir in "${exclude_dirs[@]}"; do
        exclude_args+=(-not -path "*/$dir/*")
    done
    for file in "${exclude_files[@]}"; do
        exclude_args+=(-not -name "$file")
    done

    local files=($(find "$search_dir" -type f "${exclude_args[@]}" -print0 | xargs -0))

    if [ ${#files[@]} -eq 0 ]; then
        echo "No files found to edit."
        return 1
    fi

    if [ ${#files[@]} -gt 100 ]; then
        read -p "Found ${#files[@]} files. Are you sure you want to open all of them? (y/N) " confirm
        if [[ $confirm != [yY] ]]; then
            echo "Operation cancelled."
            return 0
        fi
    fi

    nvim "${files[@]}"
}
