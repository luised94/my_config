# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Fix for PS1 unbound variable in non-interactive shells
if [[ -z "$PS1" ]]; then
    PS1="\\$ "
fi

export LC_ALL=en_US.utf8
export LANG=en_US.utf8
# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
export PATH=$HOME/.local/bin:$PATH
alias R='R --no-save'
alias edit_bmc_configs='vim ~/data/*Bel/documentation/*_bmc_config.R core_scripts/template_bmc_config.R'
alias srun_r='srun --pty bash -c "module add r/4.2.0; exec bash"'
#alias nvim="$HOME/nvim-linux64/bin/nvim"

#!/bin/bash
#===============================================================================
# TITLE: See SLURM Job Logs
# DESCRIPTION: View all log files for a specific SLURM job ID
#===============================================================================

see_logs() {
    local jobid="$1"

    # Validate input
    if [[ -z "$jobid" ]]; then
        echo "Error: Job ID must be provided"
        echo "Usage: see_logs <jobid>"
        return 1
    fi

    if ! [[ "$jobid" =~ ^[0-9]+$ ]]; then
        echo "Error: Job ID must be a number"
        return 1
    fi

    # Check if job directory exists (limit depth to first level)
    local job_dir=$(find ~/logs/*/*/ -maxdepth 1 -type d -name "job_${jobid}" 2>/dev/null)
    if [[ -z "$job_dir" ]]; then
        echo "Error: No logs found for job ${jobid}"
        return 1
    fi

    # Find and sort all log files
    local log_files=$(find "$job_dir" -type f | sort)
    if [[ -z "$log_files" ]]; then
        echo "Error: No log files found in ${job_dir}"
        return 1
    fi

    # Display found files
    echo "Found log files for job ${jobid}:"
    echo "$log_files" | sed 's/^/  /'

    # Open files in vim
    read -p "Open these files in vim? (y/n): " confirm
    if [[ $confirm =~ ^[Yy]$ ]]; then
        vim $(echo "$log_files")
    fi
}

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/luised94/miniforge3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/luised94/miniforge3/etc/profile.d/conda.sh" ]; then
        . "/home/luised94/miniforge3/etc/profile.d/conda.sh"
    else
        export PATH="/home/luised94/miniforge3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<
#===============================================================================
# TITLE: Open Experiment Documentation
# DESCRIPTION: View all documentation files for a specific experiment
#===============================================================================

open_experiment_config() {
    local expid="$1"

    # Validate input format (YYMMDDBel)
    if [[ -z "$expid" ]]; then
        echo "Error: Experiment ID must be provided"
        echo "Usage: open_experiment_config <YYMMDD>Bel"
        return 1
    fi

    if ! [[ "$expid" =~ ^[0-9]{6}Bel$ ]]; then
        echo "Error: Invalid experiment ID format"
        echo "Expected format: YYMMDDBel (e.g., 240304Bel)"
        return 1
    fi

    # Check if experiment directory exists
    local exp_dir="${HOME}/data/${expid}"
    if [[ ! -d "$exp_dir" ]]; then
        echo "Error: Experiment directory not found: ${exp_dir}"
        return 1
    fi

    # Check if documentation directory exists
    local doc_dir="${exp_dir}/documentation"
    if [[ ! -d "$doc_dir" ]]; then
        echo "Error: Documentation directory not found: ${doc_dir}"
        return 1
    fi

    # Find and sort all documentation files
    local doc_files=$(find "$doc_dir" -type f | sort)
    if [[ -z "$doc_files" ]]; then
        echo "Error: No documentation files found in ${doc_dir}"
        return 1
    fi

    # Display found files
    echo "Found documentation files for experiment ${expid}:"
    echo "$doc_files" | sed 's/^/  /'

    # Open files in vim
    vim $(echo "$doc_files")
}

